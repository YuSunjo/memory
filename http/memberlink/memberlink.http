### MemberLink API 테스트

### Login first
POST {{memory_api}}/api/v1/member/login
Content-Type: application/json

{
  "email": "tnswh2023@naver.com",
  "password": "1234"
}

> {%
    client.global.set("access_token", response.body.data.accessToken);
%}

### 1. 링크 생성 - Instagram
POST {{memory_api}}/api/v1/member-links
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "title": "Instagram",
  "url": "https://instagram.com/username",
  "description": "팔로우 해주세요!",
  "isActive": true,
  "isVisible": true,
  "iconUrl": "https://example.com/instagram-icon.png"
}

### 2. 링크 생성 - GitHub
POST {{memory_api}}/api/v1/member-links
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "title": "GitHub",
  "url": "https://github.com/username"
}

### 3. 링크 생성 - YouTube
POST {{memory_api}}/api/v1/member-links
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "title": "YouTube",
  "url": "https://youtube.com/@username",
  "description": "구독 부탁드려요!"
}

### ============== 수정 API ==============

### 4. 링크 수정 - 제목 변경
PUT {{memory_api}}/api/v1/member-links/1
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "title": "Updated Instagram",
  "url": "https://instagram.com/new_username",
  "description": "새로운 인스타그램 계정입니다!",
  "displayOrder": 1,
  "isActive": true,
  "isVisible": true,
  "iconUrl": "https://example.com/new-instagram-icon.png"
}

### ============== 순서 변경 API ==============

### 5. 링크 순서 변경 - 1번 링크를 3번째로 이동
PATCH {{memory_api}}/api/v1/member-links/1/order
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "displayOrder": 3
}

### 6. 링크 순서 변경 - 3번 링크를 1번째로 이동
PATCH {{memory_api}}/api/v1/member-links/3/order
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "displayOrder": 1
}

### 7. 링크 순서 변경 - 2번 링크를 2번째로 이동 (변화 없음)
PATCH {{memory_api}}/api/v1/member-links/2/order
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "displayOrder": 2
}

### 8. 링크 순서 변경 - 잘못된 순서 (에러 테스트)
PATCH {{memory_api}}/api/v1/member-links/1/order
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "displayOrder": 99
}

### ============== 조회 API ==============

### 9. 내 링크 목록 조회 (인증 필요, 비공개 링크 포함)
GET {{memory_api}}/api/v1/member-links
Authorization: Bearer {{access_token}}

### 10. 공개 링크 목록 조회 (인증 불필요, memberId를 실제 값으로 변경하세요)
GET {{memory_api}}/api/v1/members/1/links

### 11. 다른 회원의 공개 링크 조회
GET {{memory_api}}/api/v1/members/2/links

### 12. 존재하지 않는 회원의 링크 조회 (에러 테스트)
GET {{memory_api}}/api/v1/members/9999/links

### ============== 삭제 API ==============

### 13. 링크 삭제 (소프트 딜리트)
DELETE {{memory_api}}/api/v1/member-links/1
Authorization: Bearer {{access_token}}

### 14. 삭제된 링크 다시 삭제 시도 (에러 테스트)
DELETE {{memory_api}}/api/v1/member-links/1
Authorization: Bearer {{access_token}}

### 15. 다른 사람 링크 삭제 시도 (에러 테스트)
DELETE {{memory_api}}/api/v1/member-links/999
Authorization: Bearer {{access_token}}

### 16. 삭제 후 목록 조회 (삭제된 링크는 조회되지 않음)
GET {{memory_api}}/api/v1/member-links
Authorization: Bearer {{access_token}}

### ============== 클릭 카운트 API ==============

### 17. 링크 클릭 카운트 증가 (인증 불필요, linkId를 실제 값으로 변경하세요)
POST {{memory_api}}/api/v1/member-links/1/click

### 18. 동일 링크 여러 번 클릭 (카운트 증가 확인)
POST {{memory_api}}/api/v1/member-links/1/click

### 19. 다른 링크 클릭
POST {{memory_api}}/api/v1/member-links/2/click

### 20. 비활성화된 링크 클릭 시도 (에러 테스트)
POST {{memory_api}}/api/v1/member-links/999/click

### 21. 삭제된 링크 클릭 시도 (에러 테스트)
POST {{memory_api}}/api/v1/member-links/1/click

### 22. 클릭 후 내 링크 조회 (통계 정보 확인)
GET {{memory_api}}/api/v1/member-links
Authorization: Bearer {{access_token}}

###