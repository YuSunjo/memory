version: '3.8'

services:
  postgres:
    image: kartoza/postgis:15-3.3
    container_name: memory-postgres-dev
    ports:
      - "5433:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./data/postgres-data:/var/lib/postgresql/data
    networks:
      - memory-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  minio:
    image: minio/minio:latest
    container_name: memory-minio-dev
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ./data/minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - memory-network
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mc:
    image: minio/mc
    container_name: minio-mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        echo 'Configuring MinIO Client...';
        mc alias set local http://minio:9000 minioadmin minioadmin &&
        mc mb -p local/memory &&
        mc anonymous set download local/memory;
        exit 0;
      "
    networks:
      - memory-network

  app:
    image: ghcr.io/yusunjo/memory/memory-app:dev
    container_name: memory-app-dev
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      CLOUD_AWS_CREDENTIALS_ACCESS-KEY: minioadmin
      CLOUD_AWS_CREDENTIALS_SECRET-KEY: minioadmin
      CLOUD_AWS_S3_BUCKET: memory
      CLOUD_AWS_REGION_STATIC: ap-northeast-2
      CLOUD_AWS_S3_ENDPOINT: http://minio:9000
      JWT_TOKEN_SECRET: ${JWT_TOKEN_SECRET}
    networks:
      - memory-network
    restart: always

  nginx:
    image: nginx:latest
    container_name: memory-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      minio:
        condition: service_healthy
      app:
        condition: service_started
    networks:
      - memory-network
    restart: always

networks:
  memory-network:
    driver: bridge

volumes:
  postgres-data:
  minio-data:
