services:
  postgres:
    image: kartoza/postgis:17-3.5
    container_name: memory-postgres-dev
    ports:
      - "5433:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST_AUTH_METHOD: md5
      PGUSER: ${POSTGRES_USER}          # 기본 사용자
      PGPASSWORD: ${POSTGRES_PASSWORD}  # 기본 비밀번호
      PGDATABASE: ${POSTGRES_DB}        # 기본 데이터베이스
    volumes:
      - ./data/postgres-data:/var/lib/postgresql
    networks:
      - memory-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  minio:
    image: minio/minio:latest
    container_name: memory-minio-dev
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ./data/minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - memory-network
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mc:
    image: minio/mc
    container_name: minio-mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        echo 'Configuring MinIO Client...';
        mc alias set local http://minio:9000 minioadmin minioadmin &&
        mc mb -p local/memory &&
        mc anonymous set download local/memory;
        exit 0;
      "
    networks:
      - memory-network

  app:
    image: ghcr.io/yusunjo/memory/memory-app:dev
    container_name: memory-app-dev
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - ./certs:/app/certs:ro
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      CLOUD_AWS_CREDENTIALS_ACCESS-KEY: minioadmin
      CLOUD_AWS_CREDENTIALS_SECRET-KEY: minioadmin
      CLOUD_AWS_S3_BUCKET: memory
      CLOUD_AWS_REGION_STATIC: ap-northeast-2
      CLOUD_AWS_S3_ENDPOINT: http://minio:9000
      JWT_TOKEN_SECRET: ${JWT_TOKEN_SECRET}
      SPRING_ELASTICSEARCH_URIS: https://elasticsearch:9200
      SPRING_ELASTICSEARCH_USERNAME: elastic
      SPRING_ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
      SPRING_ELASTICSEARCH_SSL_TRUST_STORE: file:/app/certs/elasticsearch-truststore.p12
      SPRING_ELASTICSEARCH_SSL_TRUST_STORE_PASSWORD: changeit
    networks:
      - memory-network
    restart: always

  nginx:
    image: nginx:latest
    container_name: memory-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    depends_on:
      minio:
        condition: service_healthy
      app:
        condition: service_started
    networks:
      - memory-network
    restart: unless-stopped

  elasticsearch:
    build:
      context: .
      dockerfile: Dockerfile_Elastic
    container_name: memory-elasticsearch-dev
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - bootstrap.memory_lock=true
    volumes:
      - ./data/elasticsearch-data:/usr/share/elasticsearch/data
      - ./certs:/usr/share/elasticsearch/config/certs
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - memory-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health -u elastic:${ELASTIC_PASSWORD} --connect-timeout 10 --max-time 10 || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 60s

  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.4
    platform: linux/arm64
    container_name: memory-kibana-dev
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=kibana_password
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=none
      - xpack.security.enabled=true
      - SERVER_PUBLICBASEURL=https://kibana.${DOMAIN}
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - memory-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  certbot:
    image: certbot/certbot
    container_name: memory-certbot-dev
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  memory-network:
    driver: bridge

volumes:
  postgres-data:
  minio-data:
  elasticsearch-data:
