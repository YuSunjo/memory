version: '3.8'

services:
  postgres:
    image: kartoza/postgis:17-3.5
    container_name: memory-postgres-local
    ports:
      - "5433:5432"
    environment:
      POSTGRES_PASSWORD: memory
      POSTGRES_USER: memory
      POSTGRES_DB: memory
    volumes:
      - ./data/postgres-data:/var/lib/postgresql
    networks:
      - memory-network

  minio:
    image: minio/minio:latest
    container_name: memory-minio-local
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ./data/minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - memory-network

  mc:
    image: minio/mc
    container_name: minio-mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        sleep 5;
        echo 'Configuring MinIO Client...';
        mc alias set local http://minio:9000 minioadmin minioadmin &&
        mc mb -p local/memory &&
        mc anonymous set download local/memory;
        exit 0;
      "
    networks:
      - memory-network

  app:
    build:
      context: ../../..
      dockerfile: memory-infra/docker/Dockerfile
    container_name: memory-app-local
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/memory
      SPRING_DATASOURCE_USERNAME: memory
      SPRING_DATASOURCE_PASSWORD: memory
      CLOUD_AWS_CREDENTIALS_ACCESS-KEY: minioadmin
      CLOUD_AWS_CREDENTIALS_SECRET-KEY: minioadmin
      CLOUD_AWS_S3_BUCKET: memory
      CLOUD_AWS_REGION_STATIC: ap-northeast-2
      CLOUD_AWS_S3_ENDPOINT: http://minio:9000
      JWT_TOKEN_SECRET: secure_enough_for_the_HS256_algorithm_memory_secret_key_v1
      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
      SPRING_ELASTICSEARCH_USERNAME: elastic
      SPRING_ELASTICSEARCH_PASSWORD: elasticsearch-local-password
    depends_on:
      - postgres
      - minio
      - elasticsearch
    networks:
      - memory-network
    restart: always

  elasticsearch:
    build:
      context: .
      dockerfile: Dockerfile_Elastic
    container_name: memory-elasticsearch-local
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ES_JAVA_OPTS=-Xms128m -Xmx256m
      - bootstrap.memory_lock=true
      - ELASTIC_PASSWORD=elasticsearch-local-password
    volumes:
      - ./data/elasticsearch-data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - memory-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health -u elastic:elasticsearch-local-password || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.4
    container_name: memory-kibana-local
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=kibana-local-password
      - xpack.security.enabled=true
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - memory-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status -u kibana_system:kibana-local-password || curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
    image: nginx:latest
    container_name: memory-nginx-local
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
      - minio
    networks:
      - memory-network


networks:
  memory-network:
    driver: bridge

volumes:
  postgres-data:
  minio-data:
  elasticsearch-data:
